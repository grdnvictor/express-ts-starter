services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      # Hot reload : monte tout le code source
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      # Ã‰vite de monter node_modules (conflits entre host/container)
      - /app/node_modules
    ports:
      - "${SERVICE_PORT:-3333}:3000"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dev-network

  database:
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    ports:
      # Expose la DB pour les outils externes (DBeaver, etc.)
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - dev-network

  prisma-studio:
    image: node:23.8.0-alpine
    working_dir: /app
    volumes:
      - ./:/app:ro
    command: ["npx", "prisma", "studio", "--port", "5555", "--browser", "none"]
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - dev-network

volumes:
  postgres-dev-data:

networks:
  dev-network:
    name: ${COMPOSE_PROJECT_NAME:-express-service}_dev_network