services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      # Bind mount pour le dÃ©veloppement uniquement
      - ./src:/app/src:ro
      - ./prisma:/app/prisma:ro
    ports:
      - "${SERVICE_PORT:-3333}:3000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - app-network

  database:
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - app-network

  prisma-studio:
    image: node:23.8.0-alpine
    working_dir: /app
    volumes:
      - ./:/app:ro
    command: ["npx", "prisma", "studio", "--port", "5555", "--browser", "none"]
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      database:
        condition: service_healthy
    profiles:
      - tools
    networks:
      - app-network

volumes:
  postgres-data:
    driver: local

networks:
  app-network:
    name: ${COMPOSE_PROJECT_NAME:-express-service}_network
    driver: bridge